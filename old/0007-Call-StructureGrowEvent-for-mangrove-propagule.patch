From ed08386606df96e67708b0cbfd275a6ffdd2a093 Mon Sep 17 00:00:00 2001
From: Noah van der Aa <ndvdaa@gmail.com>
Date: Tue, 21 Jun 2022 04:41:22 +0200
Subject: [PATCH] Call StructureGrowEvent for mangrove propagule

---
 .../level/block/MangrovePropaguleBlock.java   | 160 ++++++++++++++++++
 1 file changed, 160 insertions(+)
 create mode 100644 src/main/java/net/minecraft/world/level/block/MangrovePropaguleBlock.java

diff --git a/src/main/java/net/minecraft/world/level/block/MangrovePropaguleBlock.java b/src/main/java/net/minecraft/world/level/block/MangrovePropaguleBlock.java
new file mode 100644
index 000000000..0a60918ec
--- /dev/null
+++ b/src/main/java/net/minecraft/world/level/block/MangrovePropaguleBlock.java
@@ -0,0 +1,160 @@
+package net.minecraft.world.level.block;
+
+import javax.annotation.Nullable;
+import net.minecraft.core.BlockPos;
+import net.minecraft.core.Direction;
+import net.minecraft.server.level.ServerLevel;
+import net.minecraft.util.RandomSource;
+import net.minecraft.world.item.context.BlockPlaceContext;
+import net.minecraft.world.level.BlockGetter;
+import net.minecraft.world.level.Level;
+import net.minecraft.world.level.LevelAccessor;
+import net.minecraft.world.level.LevelReader;
+import net.minecraft.world.level.block.grower.MangroveTreeGrower;
+import net.minecraft.world.level.block.state.BlockBehaviour;
+import net.minecraft.world.level.block.state.BlockState;
+import net.minecraft.world.level.block.state.StateDefinition;
+import net.minecraft.world.level.block.state.properties.BlockStateProperties;
+import net.minecraft.world.level.block.state.properties.BooleanProperty;
+import net.minecraft.world.level.block.state.properties.IntegerProperty;
+import net.minecraft.world.level.material.FluidState;
+import net.minecraft.world.level.material.Fluids;
+import net.minecraft.world.phys.Vec3;
+import net.minecraft.world.phys.shapes.CollisionContext;
+import net.minecraft.world.phys.shapes.VoxelShape;
+
+public class MangrovePropaguleBlock extends SaplingBlock implements SimpleWaterloggedBlock {
+    public static final IntegerProperty AGE = BlockStateProperties.AGE_4;
+    public static final int MAX_AGE = 4;
+    private static final VoxelShape[] SHAPE_PER_AGE = new VoxelShape[]{Block.box(7.0D, 13.0D, 7.0D, 9.0D, 16.0D, 9.0D), Block.box(7.0D, 10.0D, 7.0D, 9.0D, 16.0D, 9.0D), Block.box(7.0D, 7.0D, 7.0D, 9.0D, 16.0D, 9.0D), Block.box(7.0D, 3.0D, 7.0D, 9.0D, 16.0D, 9.0D), Block.box(7.0D, 0.0D, 7.0D, 9.0D, 16.0D, 9.0D)};
+    private static final BooleanProperty WATERLOGGED = BlockStateProperties.WATERLOGGED;
+    public static final BooleanProperty HANGING = BlockStateProperties.HANGING;
+    private static final float GROW_TALL_MANGROVE_PROBABILITY = 0.85F;
+
+    public MangrovePropaguleBlock(BlockBehaviour.Properties settings) {
+        super(new MangroveTreeGrower(0.85F), settings);
+        this.registerDefaultState(this.stateDefinition.any().setValue(STAGE, Integer.valueOf(0)).setValue(AGE, Integer.valueOf(0)).setValue(WATERLOGGED, Boolean.valueOf(false)).setValue(HANGING, Boolean.valueOf(false)));
+    }
+
+    @Override
+    protected void createBlockStateDefinition(StateDefinition.Builder<Block, BlockState> builder) {
+        builder.add(STAGE).add(AGE).add(WATERLOGGED).add(HANGING);
+    }
+
+    @Override
+    protected boolean mayPlaceOn(BlockState floor, BlockGetter world, BlockPos pos) {
+        return super.mayPlaceOn(floor, world, pos) || floor.is(Blocks.CLAY);
+    }
+
+    @Nullable
+    @Override
+    public BlockState getStateForPlacement(BlockPlaceContext ctx) {
+        FluidState fluidState = ctx.getLevel().getFluidState(ctx.getClickedPos());
+        boolean bl = fluidState.getType() == Fluids.WATER;
+        return super.getStateForPlacement(ctx).setValue(WATERLOGGED, Boolean.valueOf(bl)).setValue(AGE, Integer.valueOf(4));
+    }
+
+    @Override
+    public VoxelShape getShape(BlockState state, BlockGetter world, BlockPos pos, CollisionContext context) {
+        Vec3 vec3 = state.getOffset(world, pos);
+        VoxelShape voxelShape;
+        if (!state.getValue(HANGING)) {
+            voxelShape = SHAPE_PER_AGE[4];
+        } else {
+            voxelShape = SHAPE_PER_AGE[state.getValue(AGE)];
+        }
+
+        return voxelShape.move(vec3.x, vec3.y, vec3.z);
+    }
+
+    @Override
+    public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
+        return isHanging(state) ? world.getBlockState(pos.above()).is(Blocks.MANGROVE_LEAVES) : super.canSurvive(state, world, pos);
+    }
+
+    @Override
+    public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
+        if (state.getValue(WATERLOGGED)) {
+            world.scheduleTick(pos, Fluids.WATER, Fluids.WATER.getTickDelay(world));
+        }
+
+        return direction == Direction.UP && !state.canSurvive(world, pos) ? Blocks.AIR.defaultBlockState() : super.updateShape(state, direction, neighborState, world, pos, neighborPos);
+    }
+
+    @Override
+    public FluidState getFluidState(BlockState state) {
+        return state.getValue(WATERLOGGED) ? Fluids.WATER.getSource(false) : super.getFluidState(state);
+    }
+
+    @Override
+    public void randomTick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
+        if (!isHanging(state)) {
+            if (random.nextInt(7) == 0) {
+                world.captureTreeGeneration = true; // Paper
+                this.advanceTree(world, pos, state, random);
+                // Paper start
+                world.captureTreeGeneration = false;
+                if (world.capturedBlockStates.size() > 0) {
+                    org.bukkit.TreeType treeType = SaplingBlock.treeType;
+                    SaplingBlock.treeType = null;
+                    org.bukkit.Location location = new org.bukkit.Location(world.getWorld(), pos.getX(), pos.getY(), pos.getZ());
+                    java.util.List<org.bukkit.block.BlockState> blocks = new java.util.ArrayList<>(world.capturedBlockStates.values());
+                    world.capturedBlockStates.clear();
+                    org.bukkit.event.world.StructureGrowEvent event = null;
+                    if (treeType != null) {
+                        event = new org.bukkit.event.world.StructureGrowEvent(location, treeType, false, null, blocks);
+                        org.bukkit.Bukkit.getPluginManager().callEvent(event);
+                    }
+                    if (event == null || !event.isCancelled()) {
+                        for (org.bukkit.block.BlockState blockstate : blocks) {
+                            blockstate.update(true);
+                        }
+                    }
+                }
+                // Paper end
+            }
+
+        } else {
+            if (!isFullyGrown(state)) {
+                world.setBlock(pos, state.cycle(AGE), 2);
+            }
+
+        }
+    }
+
+    @Override
+    public boolean isValidBonemealTarget(BlockGetter world, BlockPos pos, BlockState state, boolean isClient) {
+        return !isHanging(state) || !isFullyGrown(state);
+    }
+
+    @Override
+    public boolean isBonemealSuccess(Level world, RandomSource random, BlockPos pos, BlockState state) {
+        return isHanging(state) ? !isFullyGrown(state) : super.isBonemealSuccess(world, random, pos, state);
+    }
+
+    @Override
+    public void performBonemeal(ServerLevel world, RandomSource random, BlockPos pos, BlockState state) {
+        if (isHanging(state) && !isFullyGrown(state)) {
+            world.setBlock(pos, state.cycle(AGE), 2);
+        } else {
+            super.performBonemeal(world, random, pos, state);
+        }
+
+    }
+
+    private static boolean isHanging(BlockState state) {
+        return state.getValue(HANGING);
+    }
+
+    private static boolean isFullyGrown(BlockState state) {
+        return state.getValue(AGE) == 4;
+    }
+
+    public static BlockState createNewHangingPropagule() {
+        return createNewHangingPropagule(0);
+    }
+
+    public static BlockState createNewHangingPropagule(int age) {
+        return Blocks.MANGROVE_PROPAGULE.defaultBlockState().setValue(HANGING, Boolean.valueOf(true)).setValue(AGE, Integer.valueOf(age));
+    }
+}
-- 
2.32.0.windows.1

